-- finding primary invariants for 5 qubits
--restart
input"5factor.m2"
---- try to find the minimal degree algebraically independent generators of the ring of invariants:
gx = gens X
nnz = 22; -- what happens when nothing is zeroed out?
vl =  unique apply(32-nnz, i-> random(32)); -- pick some variables to zero
while #vl !=32-nnz do vl = unique(vl|apply(32-nnz-#vl, i-> random(32)))
randomLinear = apply(vl, i-> gx_i=>0); --random dense points takes longer than just evaluation. Try random sparse...
bx = sub(basis(1,X),randomLinear);
jc = I-> diff(transpose bx, gens I );
jacEval = (fns, rnp) -> (
    bxn1 := reverse subsets( gx, #gx-1);
    matrix for i to 31 list (
    rules = apply(bxn1#i, xx-> xx=>rnp xx);
    fns0 = matrix {apply(fns,fn -> sub(fn, rules ))};
    flatten entries rnp diff(gx#i,  fns0 ))
)

L4 = {syt4#0,syt4#0,syt4#0,syt4#0,syt4#1};
inv4p1 = tab2polyEval(L4,randomLinear); 
inv4p2 = tab2polyEval(L4_{0,1,2,4,3},randomLinear); 
inv4p3 = tab2polyEval(L4_{0,1,4,2,3},randomLinear); 
inv4p4 = tab2polyEval(L4_{0,4,2,2,3},randomLinear); 
inv4p5 = tab2polyEval(L4_{4,0,1,2,3},randomLinear); 
rp = rndPt();
I4 = ideal(inv4p1,inv4p2, inv4p3, inv4p4, inv4p5 );
rank rp jacobian I4, betti mingens I4

inv6 = tab2polyEval(syt6,randomLinear);
I6 = ideal inv6;

time I8 = ideal apply(mgTabList8, pp-> tab2polyEval(apply(5, i-> syt8#(pp#i)), randomLinear));
I = I4 + I6 + I8;
betti I
rank rp jc I

time I10 = ideal apply(goodTabList10, pp-> tab2polyEval(apply(5, i-> syt10#(pp#i)), randomLinear));
I = I+ I10;
rank rp jc I
ideal(I10_0);
Ito10 = I4 + I6 + ideal (flatten entries gens I8)_{0,1,2,3,20} + ideal(I10_0);
rank rp jc Ito10

I12 = {};
for L in minList12 do (time I12 =  I12 |{ tab2polyEval(apply(L, l-> syt12#l),randomLinear) };
time I = Ito10 + ideal I12;
time print(betti I);
--time print(rank jacEval(flatten entries gens I, rp));
time print(rank rp jc I);
)


end; -- move this down if you want to compute more automatically

restart
input"primaryInvariants.m2"
--I = ideal {inv4p1,inv4p2, inv4p3, inv4p4, inv4p5, inv6}+  I8 +  I10;
betti I
coefficientRing ring I
rank rp jc I
-- try to find the 5,1,5,1,5 pattern:
gns  = (flatten entries gens I)_({0,1,2,3,4}|{5}|{6,7,8,9,10});
degree\ gns
for i from 1 to #gns -1 do print (i+1, rank jacEval(gns_{0..i}, rp)) 
rank rp jc I
betti I
tmp = I4 + I6 + ideal (flatten entries gens I8)_{0,1,2,3,4} + ideal(I10_0) + ideal(I12_{0..4});
betti tmp
rank rp jc tmp
rndLn = apply(32, i-> gx_i=>random(KK)*x_(0,0,0,0,0)+ random(KK)*x_(1,1,1,1,1) );
Is = sub(I,rndLn);
Is = ideal mingens Is

for k from 4 to 10 do (
rndLn = apply(32, i-> gx_i=>sum(k, j-> random(KK)*gx_j));
time Is = sub(I,rndLn);
time Is = ideal mingens Is;
time print radical Is
)

--- to do: try to compute some zeros of the ideal generated by the polynomials we select to determine if they are a homogenoeus system of parameters. 

needsPackage "NumericalAlgebraicGeometry";
-- R = CC[x,y];                                                                         
-- F = polySystem {x^2+y^2-1, x*y};
-- newton(F,point{{0.1*ii,1.1}})
input"primaryInvariants.m2"
nzv = for xx in flatten entries bx list if xx!=0 then xx else continue
XC = CC[nzv]
IC = sub(I,XC);
numgens IC
#nzv
F = polySystem ((flatten entries gens IC)|(flatten entries gens sub(ideal nzv_{0..8},XC)));
 newton(F,point{apply(#nzv, i-> random(CC))})
